name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (minor or patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run unit tests
        run: |
          python -m unittest discover -s tests -v

  build-and-release:
    name: Build and Create Release
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Calculate version
        id: version
        run: |
          # Get current date components
          YEAR=$(date +%Y)
          MONTH=$(date +%m)
          DAY=$(date +%d)
          
          # Get latest tag matching new version pattern (YYYY.MM.DD.MAJOR.MINOR.PATCH)
          LATEST_TAG=$(git tag -l "${YEAR}.${MONTH}.${DAY}.*.*.*" | sort -V | tail -n 1)
          
          # Determine version type
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          if [ -z "$LATEST_TAG" ]; then
            # No tag for today yet - check for any tags with YYYY.MM.DD pattern
            LATEST_TAG=$(git tag -l | grep -E '^[0-9]{4}\.[0-9]{2}\.[0-9]{2}\.[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
            
            if [ -z "$LATEST_TAG" ]; then
              # No tags at all with new format, start fresh
              MAJOR=0
              MINOR=0
              PATCH=1
            else
              # Extract components from latest tag
              PREV_MAJOR=$(echo $LATEST_TAG | cut -d. -f4)
              PREV_MINOR=$(echo $LATEST_TAG | cut -d. -f5)
              PREV_PATCH=$(echo $LATEST_TAG | cut -d. -f6)
              
              # Increment based on version type
              case "$VERSION_TYPE" in
                major)
                  MAJOR=$((PREV_MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                minor)
                  MAJOR=$PREV_MAJOR
                  MINOR=$((PREV_MINOR + 1))
                  PATCH=0
                  ;;
                patch)
                  MAJOR=$PREV_MAJOR
                  MINOR=$PREV_MINOR
                  PATCH=$((PREV_PATCH + 1))
                  ;;
              esac
            fi
          else
            # Extract current version components
            CURRENT_MAJOR=$(echo $LATEST_TAG | cut -d. -f4)
            CURRENT_MINOR=$(echo $LATEST_TAG | cut -d. -f5)
            CURRENT_PATCH=$(echo $LATEST_TAG | cut -d. -f6)
            
            # Increment based on version type
            case "$VERSION_TYPE" in
              major)
                MAJOR=$((CURRENT_MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MAJOR=$CURRENT_MAJOR
                MINOR=$((CURRENT_MINOR + 1))
                PATCH=0
                ;;
              patch)
                MAJOR=$CURRENT_MAJOR
                MINOR=$CURRENT_MINOR
                PATCH=$((CURRENT_PATCH + 1))
                ;;
            esac
          fi
          
          VERSION="${YEAR}.${MONTH}.${DAY}.${MAJOR}.${MINOR}.${PATCH}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"
      
      - name: Update version in files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Update __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"${VERSION}\"/" chatrixcd/__init__.py
          
          # Update setup.py
          sed -i "s/version=\".*\"/version=\"${VERSION}\"/" setup.py
          
          echo "Updated version to ${VERSION}"
      
      - name: Update CHANGELOG.md
        run: |
          export VERSION="${{ steps.version.outputs.version }}"
          export RELEASE_DATE=$(date +%Y-%m-%d)
          
          # Use Python to update the changelog in a more reliable way
          python3 << 'PYTHON_SCRIPT'
          import re
          from datetime import datetime
          import os
          
          version = os.environ['VERSION']
          release_date = os.environ['RELEASE_DATE']
          
          # Read the current CHANGELOG.md
          with open('CHANGELOG.md', 'r') as f:
              content = f.read()
          
          # Find the Unreleased section
          # Pattern: ## [Unreleased] followed by content until next ## heading
          unreleased_pattern = r'## \[Unreleased\]\n(.*?)(?=\n## |\Z)'
          match = re.search(unreleased_pattern, content, re.DOTALL)
          
          if match:
              unreleased_content = match.group(1).strip()
              
              # If there's no content, add a placeholder
              if not unreleased_content:
                  unreleased_content = "No changes recorded."
              
              # Create the new version section
              new_version_section = f"\n## [{version}] - {release_date}\n\n{unreleased_content}\n"
              
              # Replace the Unreleased section with an empty one and add the new version
              # Find position where to insert: after ## [Unreleased] line
              unreleased_header_end = match.start() + len("## [Unreleased]\n")
              next_section_start = match.end()
              
              new_content = (
                  content[:unreleased_header_end] + 
                  new_version_section + 
                  content[next_section_start:]
              )
              
              # Update Version History section if it exists
              version_history_pattern = r'(## Version History\s*\n)'
              if re.search(version_history_pattern, new_content):
                  new_content = re.sub(
                      version_history_pattern,
                      f'\\1\n- **{version}** ({release_date})\n',
                      new_content
                  )
              
              # Write the updated content
              with open('CHANGELOG.md', 'w') as f:
                  f.write(new_content)
              
              print(f"Updated CHANGELOG.md with version {version}")
          else:
              print("Warning: Could not find Unreleased section in CHANGELOG.md")
          PYTHON_SCRIPT
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Get the latest tag (if any)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate changelog from commits
          if [ -z "$LATEST_TAG" ]; then
            # No previous tag, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog content
          cat > release_changelog.md << EOF
          ## What's Changed
          
          ${COMMITS}
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${VERSION}
          EOF
          
          echo "Generated changelog for version ${VERSION}"
      
      - name: Commit version updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add chatrixcd/__init__.py setup.py CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push
      
      - name: Create Git tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git tag -a "${VERSION}" -m "${VERSION}"
          git push origin "${VERSION}"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body_path: release_changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
